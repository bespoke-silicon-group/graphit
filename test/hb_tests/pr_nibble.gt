element Vertex end
element Edge end
const edges : edgeset{Edge}(Vertex,Vertex) = load (argv[1]);
const vertices : vertexset{Vertex} = edges.getVertices();
const p : vector{Vertex}(double) = 0.0;
const old_rank : vector{Vertex}(double) = 0.0;
const new_rank : vector{Vertex}(double) = 0.0;
const alpha: double = 0.15;
const epsilon: double = 1e-6;
const out_degree : vector {Vertex}(int) = edges.getOutDegrees();

func updateEdge(src : Vertex, dst : Vertex)
    new_rank[dst] = new_rank[dst] + ((1 - alpha) / (1 + alpha)) * old_rank[src] / out_degree[src];
end

func updateSelf(v : Vertex)
    p[v] = p[v] + (2 * alpha) / (1 + alpha) * old_rank[v];
    new_rank[v] = 0;
end

func filter_frontier(v: Vertex) -> output : bool
    output = old_rank[v] > out_degree[v]*epsilon;
end

func main()
    var start_vertex : int = atoi(argv[2]);
    var frontier : vertexset{Vertex} = new vertexset{Vertex}(0);
    frontier.addVertex(start_vertex);
    old_rank[start_vertex] = 1.0;
    while(frontier.getVertexSetSize != 0)
            new_rank = old_rank;
            frontier.apply(updateSelf);
            #s1# edges.from(frontier).apply(updateEdge);
            old_rank = new_rank;
            frontier = vertices.filter(filter_frontier);
    end
end

schedule:
    SimpleHBSchedule s1;
    program->applyHBSchedule("s1", s1);
    program->configApplyDirection("s1","DensePull");
