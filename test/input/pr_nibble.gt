element Vertex end
element Edge end
const edges : edgeset{Edge}(Vertex,Vertex) = load (argv[1]);
const vertices : vertexset{Vertex} = edges.getVertices();
const p : vector{Vertex}(float) = 0;
const r : vector{Vertex}(float) = 0;
const r_p : vector{Vertex}(float) = 0;
const alpha : float = 0.85;
const epsilon : float = 0.1;
const out_degree : vector{Vertex}(int) = edges.getOutDegrees();

func updateNeigh(src : Vertex, dst : Vertex)
    r_p[dst] += (((1 - alpha)/(1 + alpha)) * r[src])/(out_degree[src]);
end

func updateSelf(v : Vertex)
    p[v] = p[v] + ((2 * alpha)/(1 + alpha))*r[v];
    r_p[v] = 0;
end

func addToFrontier(v : vertex) -> output : bool
    output = r[v] >= out_degree[v]*epsilon;
end

func printRank(v : Vertex)
    print p[v];
end

func main()
    var frontier : vertexset{Vertex} = new vertexset{Vertex}(0);
    frontier.addVertex(0);
    r[0] = 1;
    while (frontier.getVertexSetSize() != 0)
        r_p = r;
        #s1# frontier.apply(updateSelf);
        #s2# edges.from(frontier).apply(updateNeigh);
        r = r_p;
        var output : vertexset{Vertex};
        #s3# output = vertices.where(addToFrontier);
        delete frontier;
        frontier = output;
    end
    #s4# vertices.apply(printRank);
    delete frontier;
end
